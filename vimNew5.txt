
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""" <<<<<<< 基础设置  >>>>>>>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set shortmess=atI               "启动不显示援助乌干达
set nocompatible	            "关闭与vi的一致性兼容
set t_Co=256                    "设置终端色彩
set noswapfile		            "禁止生成临时文件
set wildmenu                    "vim命令输入时提示菜单增强模全
"set wildmode=list:longest       "vim命令行增强模式list
set nowrap                      "禁止折行"
set history=50   	            "保存历史命令

set hlsearch                    "高亮显示搜索结果
set incsearch                   "边输入快速搜索
set showmatch                   "高亮匹配括号
set matchtime=2                 "高亮显示时间"
set ignorecase		            "搜索忽略大小写

set mouse=a		                "允许鼠标滚
set clipboard=unnamed	        "允许访问系统剪切板
set backspace=2		            "允许退格键使用

set showcmd		                "显示未完成的命令
set showmode		            "显示当前的模式
set ruler		                "显示右下角显示光标位置
set nu			                "显示行号
set cursorline                  "高亮显示当前行/列
"set cursorcolumn

set expandtab                   "设置缩进,空格代替Tab
set tabstop=4
set sts=4
set softtabstop=4
set shiftwidth=4
set autoindent

set autoread		            "文件修改后自动载入
set autowrite		            "自动保存
set autochdir 		            "打开文件自动切换到目录下  nerdtree

set splitbelow		            "允许分屏 sv,vs
set splitright

set magic                       "设置magic  正则规则

set noerrorbells                "禁止vim的的错误声音等"
set novisualbell
set t_vb=
set tm=500

set ffs=unix,dos,mac            "使用unix 作为标准的文件类型"

"使用vim方向键来切换编辑窗口 Ctrl+H/J/K/L
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

filetype indent on              "根据文件自动缩进
filetype off                    "关闭文件类型检测

"覆盖一个文件时，保存备份
if has("vms")
   set nobackup
else
   set backup
endif

"当Gui启动的时候取消界面多余显示
"if has("gui_running")
"     set guioptions-=T
"     set guioptions-=e
"     set t_Co=256
"     set guitablabel=%M\ %t
"endif

"if g:isGUI
if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
    nmap <silent> <c-F11> :if &guioptions =~# 'm' <Bar>
        \set guioptions-=m <Bar>
        \set guioptions-=T <Bar>
        \set guioptions-=r <Bar>
        \set guioptions-=L <Bar>
     \else <Bar>
        \set guioptions+=m <Bar>
        \set guioptions+=T <Bar>
        \set guioptions+=r <Bar>
        \set guioptions+=L <Bar>
    \endif<CR>
endif


"PEPE python缩进
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |


"缩进设置
au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |


"""" >>>>>>> 编码方式设置

"参考: https://github.com/ryanoasis/nerd-fonts  图标字体设置
let $LANG='en'                                 "设置为英文显示
set langmenu=en
set encoding=utf-8
set termencoding=utf-8
"set guifont=DroidSansMonoForPowerline\ Nerd\ Font\ 12	    "设置GuiVim字体 Linux
"set guifont=DroidSansMonoForPowerline\ Nerd\ Font:H12	    "设置GuiVim字体 Mac
set fileencodings=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936 	"设置编码格式

let &termencoding=&encoding		                "设置编码方式
let g:rehash256 = 1			                    "设置vim的背景接近终端


if has("mac") || has("macunix")
    set gfn=DroidSansMonoForPowerline\ Nerd\ Font:H12
elseif has("win16") || has("win32")
    set gfn=DroidSansMonoForPowerline\ Nerd\ Font:h12
elseif has("gui_gtk2")
    set gfn=DroidSansMonoForPowerline\ Nerd\ Font\ 12
elseif has("linux")
    set gfn=DroidSansMonoForPowerline\ Nerd\ Font\ 12
elseif has("unix")
    set gfn=DroidSansMonoForPowerline\ Nerd\ Font:H12
endif



"""" >>>>>>> 语法高亮 & 主题设置
let python_highlight_all=1

syntax enable                   "允许自定义语法
syntax on                       "开启语法高亮
colorscheme molokai             "vim主题






"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""" <<<<<<<  插件设置 >>>>>>>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""" >>>>>>> Airline 设置
let g:airline_theme="papercolor"		        "主题设置
let g:airline_powerline_fonts = 1               "显示powerline字体补丁
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

nnoremap <F7> :TagbarToggle<C-R>                 "打开/关闭标签浏览


"""" >>>>>>> Nerdtree  目录浏览设置
let g:nerdtree_tabs_open_on_console_startup = 1	"vim开启nerdtree
let g:nerdtree_tabs_open_on_gui_startup = 1		"GuiVim开启nerdtree
let g:nerdtree_tabs_no_startup_for_diff = 1		"当diff启动时不启动nerdtree
let g:nerdtree_tabs_smart_startup_focus = 1		"当启动时编辑区域自动获取焦点
let g:nerdtree_tabs_autofind = 0			    "自动选择当前选中的文件
let g:nerdtree_tabs_autoclose = 1			    "关闭当前的tab
let NERDTreeShowBookmarks=1                     "显示书签
let NERDTreeIgnore=['\.pyc$', '\~$']			"隐藏pyc文件
let NERDTreeWinSize=32                          "设置NerdTree 窗口宽度
let NERDTreeMinimalUI=1                         "设置NerdTree 不显示多余的帮助信息
let NERDTreeAutoDeleteBuffer=1                  "删除文件时候，删除Buffer

nnoremap <F6> :NERDTreeToggle<C-R>  "打开/关闭目录浏览


"""" >>>>>>> Nerdtreetabs  设置
let g:NERDSpaceDelims = 1                   "注释之后带空格
let g:NERDCompactSexyComs = 1				"紧凑注释
let g:NERDDefaultAlign = 'left'             "注释默认左对齐
let g:NERDCustomDelimiters = { 'python ': { 'left': '# '}  }
let g:NERDAltDelims_python= 1               "默认使用python的注释配置
let g:NERDTrimTrailingWhitespace = 1        "自动修复行末尾的空格


"""" >>>>>>> Syntastic 语法检查设置
set statusline+=%#warningmsg#	"语法检查
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set laststatus=2				"显示最后一个窗口的状态行

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = '✗'			    "设置显示符号
let g:syntastic_warning_symbol = '⚠'
"let g:syntastic_python_checker="flake8,pyflakes,pep8,pylint"
let g:syntastic_python_checkers = ['flake8']
"let g:syntastic_python_flake8_args='-ignore='
let g:syntastic_markdown_checkers = ['mdl']


"""" >>>>>>> Ycm  代码自动补全设置
let g:ycm_python_binary_path = '/Library/Frameworks/Python.framework/Versions/2.7/bin/python'
let g:ycm_autoclose_preview_window_after_completion=1   "关闭补全窗口的出现
let g:ycm_min_num_of_chars_for_completion=1             "从第一个字符就开始匹配了
let g:ycm_collect_identifiers_from_tags_files=1         "开启标签引擎
let g:ycm_cache_omnifunc=0                              "禁止匹配缓存
let g:ycm_seed_identifiers_with_syntax=1                "语法关键字补全

map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>      "Ycm跳转到定义的快捷键"


"""" >>>>>>> Multi_cursorM 多光标编辑设置
let g:multi_cursor_start_key='<F5>'			"多光标编辑
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-m>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'


"""" >>>>>>> Ag 搜索定位设置
let g:ag_working_path_mode="r"                  "Ag搜索设置


"""" >>>>>>> UltiSnips 代码片段设置
let g:UltiSnipsExpandTrigger="<leader><tab>"    "代码片段设置
let g:UltiSnipsJumpForwardTrigger="<leader><tab>"
let g:UltiSnipsJumpBackwardTrigger="<leader><s-tab>"
"let g:UltiSnipsSnippetDirectories=["/home/rapcoder/.vim/bundle/vim-snippets/UltiSnips/"]


"""" >>>>>>> Devicons 图标美化设置
let g:webdevicons_enable_nerdtree = 1           "图标设置
let g:webdevicons_enable = 1
let g:webdevicons_enable_airline_tabline = 1


"""" >>>>>>> SimpylFold 代码折叠设置
let g:SimpylFold_docstring_preview=1            "代码折叠显示字符串
let g:SimpylFold_fold_import = 0

nnoremap <space> za                             "折叠/展开代码
nnoremap <F3> zM                                "关闭所有的折叠
nnoremap <F4> zR                                "开启所有的折叠

set foldmethod=indent	                        "根据缩进进行代码折叠
set foldmethod=syntax                           "根据语法进行代码折叠
set foldenable                                  "Vim启动,关闭代码折叠foldenable  nofoldenable
set foldlevel=99


"""" >>>>>>> vim-pasta 粘贴自动格式化设置
let g:pasta_enabled_filetypes = ['python', 'javascript', 'css', 'sh']   "粘贴后格式自动排版
let g:pasta_paste_before_mapping = ',P'
let g:pasta_paste_after_mapping = ',p'


"""" >>>>>>> Ctrlp 搜索设置
let g:ctrlp_map = '<c-p>'                       "Ctrlp超级搜索
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }


if has("mac") || has("macunix") || has("unix") || has("Linux")
    set wildignore+=*/tmp/*,*.so,*.swp,*.zip                " MacOSX/Linux   Ctrl超级搜索
    let g:ctrlp_user_command = 'find %s -type f'            " MacOSX/Linux
elseif has("win16") || has("win32")
    set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe             " Windows
    let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'      " Windows
endif




"""" >>>>>>> AutoPairs 自动补全一对符号设置
let g:AutoPairsFlyMode = 0                                  "自动补全一对符号
let g:AutoPairsShortcutBackInsert = '<M-b>'


"""" >>>>>>> Markdown 预览设置
let g:instant_markdown_slow = 1                             "Markdown 实时预览
autocmd BufNewFile,BufReadPost *.md set filetype=markdown	"markdown设置


"""" >>>>>>> indentLine 缩进指示线设置
"缩进指示线"
let g:indentLine_char='┆'
let g:indentLine_enabled = 1


"""" >>>>>>> Python  PEP8语法检查设置
"autopep8设置"
let g:autopep8_disable_show_diff=1







"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""" <<<<<<<  插件管理 >>>>>>>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 设置包括vundle和初始化相关的runtime path

if has("mac") || has("macunix") || has("unix") || has("Linux")
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
elseif has("win16") || has("win32")
    set rtp+=$VIM/vimfiles/bundle/Vundle.Vim/
    call vundle#begin('$VIM/vimfiles/bundle/')
endif



" 让vundle管理插件版本,必须
Plugin 'VundleVim/Vundle.vim'			"vim 插件管理
Plugin 'scrooloose/nerdtree'			"vim 文件目录浏览
Plugin 'jistr/vim-nerdtree-tabs'		"vim 文件目录浏览插件

Plugin 'scrooloose/nerdcommenter'		"vim 注释功能
Plugin 'tmhedberg/SimpylFold'           "vim 代码折叠
Plugin 'kien/ctrlp.vim'                 "vim 超级搜索功能
Plugin 'tpope/vim-surround'			    "vim 编辑辅助符号标签快速修改
Plugin 'bronson/vim-trailing-whitespace'    "vim 空格自动修复
Plugin 'valloric/youcompleteme'			"vim 自动补全提示
Plugin 'scrooloose/syntastic'			"vim 语法检查
Plugin 'sickill/vim-pasta'              "vim 粘贴代码自动格式
Plugin 'jiangmiao/auto-pairs'           "vim 自动补全符号
Plugin 'yggdroot/indentline'            "vim 缩进指示线条
Plugin 'ap/vim-css-color'               "vim 显示代码样式颜色

Plugin 'tpope/vim-fugitive'			    "vim git插件
Plugin 'rking/ag.vim'				    "vim ag搜索查询定位
Plugin 'shougo/vimshell.vim'			"vim 支持shell 命令
Plugin 'shougo/vimproc.vim'			    "vim shell插件
Plugin 'terryma/vim-multiple-cursors'	"vim 多光标编辑
Plugin 'sirver/ultisnips'			    "vim 代码模块片段
Plugin 'honza/vim-snippets'			    "~
Plugin 'tpope/vim-markdown'			    "vim markdown支持
Plugin 'suan/vim-instant-markdown'      "vim markdown实时预览
Plugin 'tell-k/vim-autopep8'            "vim PEP8自动格式化代码

Plugin 'tomasr/molokai'				    "vim 主题
Plugin 'vim-airline/vim-airline'		"vim 状态栏
Plugin 'vim-airline/vim-airline-themes' "vim 状态栏主题
Plugin 'majutsushi/tagbar'			    "vim tagbar标签显示
Plugin 'ryanoasis/vim-devicons'			"vim 图标美化
"Plugin 'ryanoasis/nerd-fonts'			"vim 图标字体，比较大根据需要


call vundle#end()
filetype plugin indent on    "必须加载vim自带和插件相应的语法和文件类型相关脚本
